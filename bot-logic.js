// bot-logic.js
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const Airtable    = require('airtable');

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Airtable ---
Airtable.configure({ apiKey: process.env.AIRTABLE_TOKEN });
const base = Airtable.base(process.env.AIRTABLE_BASE_ID);

// --- –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ---
const MESSAGES = {
  uk: {
    chooseLang:   '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    menuTitle:    '–ú–µ–Ω—é:',
    createReport: 'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç',
    attachFiles:  '–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–≤—ñ—Ç—É. –ö–æ–ª–∏ –≤—Å–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    done:         '‚úÖ –ì–æ—Ç–æ–≤–æ',
    addFile:      '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    noFiles:      '–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏.',
    selectChannels: '–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏:',
    confirm:      'üöÄ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
    chooseAtLeast:'–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
    reportSaved:  '‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
    errorSave:    '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.'
  },
  ru: {
    chooseLang:   '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:',
    menuTitle:    '–ú–µ–Ω—é:',
    createReport: 'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç',
    attachFiles:  '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç—á—ë—Ç–∞. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –≤—Å—ë ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    done:         '‚úÖ –ì–æ—Ç–æ–≤–æ',
    addFile:      '–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–Ω–æ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    noFiles:      '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.',
    selectChannels: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:',
    confirm:      'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
    chooseAtLeast:'–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
    reportSaved:  '‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
    errorSave:    '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.'
  }
};

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
const pending = {};   // pending[chatId] = { lang, files:[], username, selectedChannels }
const CHANNELS = ['Telegram','Facebook','WhatsApp','Viber'];

// --- –§—É–Ω–∫—Ü–∏—è retry –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Airtable ---
async function createRecordWithRetry(fields, retries = 2) {
  try {
    return await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]);
  } catch (err) {
    if (retries > 0) {
      await new Promise(r => setTimeout(r, 1000));
      return createRecordWithRetry(fields, retries - 1);
    }
    throw err;
  }
}

// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
function makeLangKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [ { text: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'lang:uk' } ],
        [ { text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',   callback_data: 'lang:ru' } ]
      ]
    }
  };
}

function makeMainMenu(lang) {
  return {
    reply_markup: {
      keyboard: [ [ MESSAGES[lang].createReport ] ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}

function makeChannelsKeyboard(selected = [], lang) {
  const buttons = CHANNELS.map(ch => ({
    text: (selected.includes(ch) ? '‚úÖ ' : '') + ch,
    callback_data: 'ch:' + ch
  }));
  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) rows.push(buttons.slice(i, i + 2));
  rows.push([ { text: MESSAGES[lang].confirm, callback_data: 'submit' } ]);
  return { reply_markup: { inline_keyboard: rows } };
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (webhook mode) ---
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { webHook: true });
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ Vercel endpoint
bot.setWebHook(`${process.env.WEBHOOK_URL}/api/index`)
   .then(() => console.log('Webhook set to', `${process.env.WEBHOOK_URL}/api/index`))
   .catch(err => console.error('Error setting webhook:', err.message));

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
// –°—Ç–∞—Ä—Ç: –≤—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫
bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  pending[chatId] = { lang: null, files: [], username: msg.from.username || msg.from.first_name };
  bot.sendMessage(chatId, MESSAGES.uk.chooseLang, makeLangKeyboard());
});

// Inline callbacks: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
bot.on('callback_query', async query => {
  const chatId = query.message.chat.id;
  const data   = query.data;
  const state  = pending[chatId];
  if (!state) return bot.answerCallbackQuery(query.id);

  // –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
  if (data.startsWith('lang:')) {
    const lang = data.split(':')[1];
    state.lang = lang;
    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.editMessageText(MESSAGES[lang].menuTitle, {
      chat_id: chatId,
      message_id: query.message.message_id
    });
    return bot.sendMessage(chatId, MESSAGES[lang].menuTitle, makeMainMenu(lang));
  }

  // –¥–∞–ª—å—à–µ –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫
  if (!state.lang) return bot.answerCallbackQuery(query.id);

  // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
  if (data.startsWith('ch:')) {
    const ch = data.slice(3);
    const sel = state.selectedChannels;
    state.selectedChannels = sel.includes(ch) ? sel.filter(x => x !== ch) : [...sel, ch];
    return bot.editMessageReplyMarkup(
      makeChannelsKeyboard(state.selectedChannels, state.lang).reply_markup,
      { chat_id: chatId, message_id: query.message.message_id }
    );
  }

  // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  if (data === 'submit') {
    if (!state.selectedChannels.length) {
      return bot.answerCallbackQuery(query.id, { text: MESSAGES[state.lang].chooseAtLeast });
    }
    const attachments = state.files.map(f => ({ url: f.url }));
    const comment = state.files.map((f, i) => `–§–∞–π–ª${i+1}: ${f.caption}`).join('\n');
    const fields = {
      Employee: state.username,
      Channel:  state.selectedChannels,
      Comment:  comment,
      Attachment: attachments
    };
    try {
      await createRecordWithRetry(fields);
      await bot.editMessageText(MESSAGES[state.lang].reportSaved, {
        chat_id: chatId,
        message_id: query.message.message_id
      });
    } catch (e) {
      console.error(e);
      await bot.editMessageText(MESSAGES[state.lang].errorSave, {
        chat_id: chatId,
        message_id: query.message.message_id
      });
    }
    delete pending[chatId];
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
bot.on('message', async msg => {
  const chatId = msg.chat.id;
  const state  = pending[chatId];
  if (!state || !state.lang) return;
  const lang = state.lang;

  // –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
  if (msg.text === MESSAGES[lang].createReport) {
    return bot.sendMessage(chatId, MESSAGES[lang].attachFiles, {
      reply_markup: { keyboard: [[MESSAGES[lang].done]], resize_keyboard: true }
    });
  }
  // –≥–æ—Ç–æ–≤–æ
  if (msg.text === MESSAGES[lang].done) {
    if (!state.files.length) return bot.sendMessage(chatId, MESSAGES[lang].noFiles);
    state.selectedChannels = [];
    return bot.sendMessage(chatId, MESSAGES[lang].selectChannels, makeChannelsKeyboard([], lang));
  }
  // –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  if (msg.photo || msg.document) {
    const fileId = msg.photo ? msg.photo.pop().file_id : msg.document.file_id;
    const url    = await bot.getFileLink(fileId);
    state.files.push({ url, caption: msg.caption || '' });
    return bot.sendMessage(chatId, MESSAGES[lang].addFile);
  }
});

// --- –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ –¥–ª—è webhook-—Ñ—É–Ω–∫—Ü–∏–∏ ---
module.exports = bot;
