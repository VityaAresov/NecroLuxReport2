// bot-logic.js
import TelegramBot from 'node-telegram-bot-api';
import Airtable from 'airtable';
import 'dotenv/config';

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Airtable ---
Airtable.configure({ apiKey: process.env.AIRTABLE_TOKEN });
const base = Airtable.base(process.env.AIRTABLE_BASE_ID);

// --- i18n ---
const MESSAGES = {
  uk: {
    chooseLang: '–û–±–µ—Ä–∏ –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
    start: '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É.',
    createReport: 'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç',
    attach: '–î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏ –∑–≤—ñ—Ç—É. –ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    done: '‚úÖ –ì–æ—Ç–æ–≤–æ',
    addFile: '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    noFiles: '–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏.',
    selectChannels: '–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏:',
    confirm: 'üöÄ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
    chooseAtLeast: '–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
    reportSaved: '‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
    errorSave: '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.',
  },
  ru: {
    chooseLang: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É',
    start: '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞.',
    createReport: 'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç',
    attach: '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç—á—ë—Ç–∞. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    done: '‚úÖ –ì–æ—Ç–æ–≤–æ',
    addFile: '–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–Ω–æ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    noFiles: '–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã.',
    selectChannels: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:',
    confirm: 'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
    chooseAtLeast: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
    reportSaved: '‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
    errorSave: '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.',
  }
};

// --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook ---
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { webHook: true });
bot.setWebHook(process.env.WEBHOOK_URL);

// --- –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
const pending = {};
const CHANNELS = ['Telegram', 'Facebook', 'WhatsApp', 'Viber'];

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Airtable —Å –ø–æ–≤—Ç–æ—Ä–æ–º
async function createRecord(fields, retries = 2) {
  try {
    await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]);
  } catch (err) {
    if (retries > 0) {
      await new Promise(r => setTimeout(r, 1000));
      return createRecord(fields, retries - 1);
    }
    throw err;
  }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
function getChannelsKeyboard(selected = [], lang = 'uk') {
  const buttons = CHANNELS.map(ch => ({ text: (selected.includes(ch) ? '‚úÖ ' : '') + ch, callback_data: 'ch:' + ch }));
  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) rows.push(buttons.slice(i, i + 2));
  rows.push([{ text: MESSAGES[lang].confirm, callback_data: 'submit' }]);
  return { reply_markup: { inline_keyboard: rows } };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
function getLangKeyboard() {
  return { reply_markup: { inline_keyboard: [
    [{ text: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'lang:uk' }],
    [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'lang:ru' }]
  ] } };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  pending[chatId] = { lang: null, files: [], username: msg.from.username || msg.from.first_name };
  bot.sendMessage(chatId, MESSAGES.uk.chooseLang, getLangKeyboard());
});

bot.on('callback_query', async query => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const state = pending[chatId];
  if (!state) return;

  // –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
  if (data.startsWith('lang:')) {
    state.lang = data.split(':')[1];
    return bot.editMessageText(MESSAGES[state.lang].start, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: { keyboard: [[MESSAGES[state.lang].createReport]], resize_keyboard: true }
    });
  }
  if (!state.lang) return;

  // –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
  if (data.startsWith('ch:')) {
    const ch = data.slice(3);
    state.selectedChannels = state.selectedChannels || [];
    state.selectedChannels = state.selectedChannels.includes(ch)
      ? state.selectedChannels.filter(c => c !== ch)
      : [...state.selectedChannels, ch];
    return bot.editMessageReplyMarkup(getChannelsKeyboard(state.selectedChannels, state.lang).reply_markup, {
      chat_id: chatId,
      message_id: query.message.message_id
    });
  }

  // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  if (data === 'submit') {
    if (!state.selectedChannels || !state.selectedChannels.length) {
      return bot.answerCallbackQuery(query.id, { text: MESSAGES[state.lang].chooseAtLeast });
    }
    const attachments = state.files.map(f => ({ url: f.url }));
    const comment = state.files.map((f, i) => `File${i + 1}: ${f.caption}`).join('\n');
    const fields = { Employee: state.username, Channel: state.selectedChannels, Comment: comment, Attachment: attachments };
    try {
      await createRecord(fields);
      await bot.editMessageText(MESSAGES[state.lang].reportSaved, { chat_id: chatId, message_id: query.message.message_id });
    } catch (e) {
      console.error(e);
      await bot.editMessageText(MESSAGES[state.lang].errorSave, { chat_id: chatId, message_id: query.message.message_id });
    }
    delete pending[chatId];
  }
});

bot.on('message', async msg => {
  const chatId = msg.chat.id;
  const state = pending[chatId];
  if (!state || !state.lang) return;
  const text = msg.text;

  if (text === MESSAGES[state.lang].createReport) {
    return bot.sendMessage(chatId, MESSAGES[state.lang].attach, { reply_markup: { keyboard: [[MESSAGES[state.lang].done]], resize_keyboard: true } });
  }
  if (text === MESSAGES[state.lang].done) {
    if (!state.files.length) {
      return bot.sendMessage(chatId, MESSAGES[state.lang].noFiles);
    }
    state.selectedChannels = [];
    return bot.sendMessage(chatId, MESSAGES[state.lang].selectChannels, getChannelsKeyboard([], state.lang));
  }

  if (msg.photo || msg.document) {
    const fileId = msg.photo ? msg.photo.pop().file_id : msg.document.file_id;
    const url = await bot.getFileLink(fileId);
    state.files.push({ url, caption: msg.caption || '' });
    return bot.sendMessage(chatId, MESSAGES[state.lang].addFile);
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
export default bot;
