// bot-logic.js

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã Telegram‚Äë–±–æ—Ç–∞.
 * @param {import('node-telegram-bot-api')} bot
 * @param {import('airtable').Base} base
 */
module.exports = function registerBotHandlers(bot, base) {
  // --- i18n ---
  const MESSAGES = {
    uk: {
      chooseLang:     '–û–±–µ—Ä–∏ –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
      start:          '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É.',
      createReport:   'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç',
      attach:         '–î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏ –∑–≤—ñ—Ç—É. –ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
      done:           '‚úÖ –ì–æ—Ç–æ–≤–æ',
      addFile:        '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
      noFiles:        '–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏.',
      selectChannels: '–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏:',
      confirm:        'üöÄ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
      chooseAtLeast:  '–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
      reportSaved:    '‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
      errorSave:      '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.'
    },
    ru: {
      chooseLang:     '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É',
      start:          '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞.',
      createReport:   'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç',
      attach:         '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç—á—ë—Ç–∞. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
      done:           '‚úÖ –ì–æ—Ç–æ–≤–æ',
      addFile:        '–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–Ω–æ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
      noFiles:        '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.',
      selectChannels: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:',
      confirm:        'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
      chooseAtLeast:  '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
      reportSaved:    '‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
      errorSave:      '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.'
    }
  };

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–∞—Ç–æ–≤
  const pending = {};
  const CHANNELS = ['Telegram','Facebook','WhatsApp','Viber'];

  // –§—É–Ω–∫—Ü–∏—è —Å retry –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Airtable
  async function createRecord(fields, retries = 2) {
    try {
      await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]);
    } catch (err) {
      if (retries > 0) {
        await new Promise(r => setTimeout(r, 1000));
        return createRecord(fields, retries - 1);
      }
      throw err;
    }
  }

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  function langKeyboard() {
    return {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'lang:uk' }],
          [{ text: '–†—É—Å—Å–∫–∏–π',   callback_data: 'lang:ru' }]
        ]
      }
    };
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  function mainMenuKeyboard(lang) {
    return {
      reply_markup: {
        keyboard: [[ MESSAGES[lang].createReport ]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };
  }

  // Inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
  function channelsKeyboard(selected, lang) {
    const buttons = CHANNELS.map(ch => ({
      text: (selected.includes(ch) ? '‚úÖ ' : '') + ch,
      callback_data: 'ch:' + ch
    }));
    const rows = [];
    for (let i = 0; i < buttons.length; i += 2) {
      rows.push(buttons.slice(i, i + 2));
    }
    // –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    rows.push([{ text: MESSAGES[lang].confirm, callback_data: 'submit' }]);
    return { reply_markup: { inline_keyboard: rows } };
  }

  // 1) /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
  bot.onText(/\/start/, msg => {
    const id = msg.chat.id;
    pending[id] = {
      lang: null,
      files: [],
      selectedChannels: [],
      username: msg.from.username || msg.from.first_name
    };
    bot.sendMessage(id, MESSAGES.uk.chooseLang, langKeyboard());
  });

  // 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ inline‚Äë–∫–Ω–æ–ø–æ–∫: —è–∑—ã–∫, –∫–∞–Ω–∞–ª—ã, submit
  bot.on('callback_query', async query => {
    const id = query.message.chat.id;
    const state = pending[id];
    const data  = query.data;
    if (!state) {
      return bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start' });
    }

    // –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    if (data.startsWith('lang:')) {
      state.lang = data.split(':')[1];
      return bot.editMessageText(MESSAGES[state.lang].start, {
        chat_id: id,
        message_id: query.message.message_id,
        reply_markup: mainMenuKeyboard(state.lang).reply_markup
      });
    }
    // –Ω–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫ ‚Äî –æ—Ç–¥–∞—Ç—å –æ—à–∏–±–∫—É
    if (!state.lang) {
      return bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.' });
    }

    // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
    if (data.startsWith('ch:')) {
      const ch = data.slice(3);
      state.selectedChannels = state.selectedChannels || [];
      if (state.selectedChannels.includes(ch)) {
        state.selectedChannels = state.selectedChannels.filter(x => x !== ch);
      } else {
        state.selectedChannels.push(ch);
      }
      return bot.editMessageReplyMarkup(
        channelsKeyboard(state.selectedChannels, state.lang).reply_markup,
        { chat_id: id, message_id: query.message.message_id }
      );
    }

    // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "submit"
    if (data === 'submit') {
      if (!state.selectedChannels.length) {
        return bot.answerCallbackQuery(query.id, { text: MESSAGES[state.lang].chooseAtLeast });
      }
      // –≥–æ—Ç–æ–≤–∏–º –∑–∞–ø–∏—Å—å –≤ Airtable
      const attachments = state.files.map(f => ({ url: f.url }));
      const comment = state.files.map((f,i) => `File${i+1}: ${f.caption}`).join('\n');
      const fields = {
        Employee:   state.username,
        Channel:    state.selectedChannels,
        Comment:    comment,
        Attachment: attachments
      };
      try {
        await createRecord(fields);
        await bot.editMessageText(MESSAGES[state.lang].reportSaved, {
          chat_id: id,
          message_id: query.message.message_id
        });
      } catch (e) {
        console.error(e);
        await bot.editMessageText(MESSAGES[state.lang].errorSave, {
          chat_id: id,
          message_id: query.message.message_id
        });
      }
      delete pending[id];
    }
  });

  // 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç", "–ì–æ—Ç–æ–≤–æ", –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  bot.on('message', async msg => {
    const id = msg.chat.id;
    const state = pending[id];
    if (!state || !state.lang) return;

    const text = msg.text;
    const lang = state.lang;

    // –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç"
    if (text === MESSAGES[lang].createReport) {
      return bot.sendMessage(id, MESSAGES[lang].attach, {
        reply_markup: { keyboard: [[ MESSAGES[lang].done ]], resize_keyboard: true }
      });
    }
    // –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ"
    if (text === MESSAGES[lang].done) {
      if (!state.files.length) {
        return bot.sendMessage(id, MESSAGES[lang].noFiles);
      }
      state.selectedChannels = [];
      return bot.sendMessage(id, MESSAGES[lang].selectChannels,
        channelsKeyboard([], lang)
      );
    }
    // –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)
    if (msg.photo || msg.document) {
      const fileId = msg.photo
        ? msg.photo[msg.photo.length - 1].file_id
        : msg.document.file_id;
      const url = await bot.getFileLink(fileId);
      state.files.push({ url, caption: msg.caption || '' });
      return bot.sendMessage(id, MESSAGES[lang].addFile);
    }
  });
};
