// bot-logic.js
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã Telegram‚Äë–±–æ—Ç–∞.
 * @param {import('node-telegram-bot-api')} bot
 * @param {import('airtable').Base} base
 */
module.exports = function registerBotHandlers(bot, base) {
  // --- i18n ---
  const M = {
    uk: {
      chooseLang: '‚ùì –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:',
      start:      'üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.',
      create:     'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç',
      attach:     'üìé –î–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏ –∑–≤—ñ—Ç—É. –ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
      done:       '‚úÖ –ì–æ—Ç–æ–≤–æ',
      add:        '‚úÖ –§–∞–π–ª –¥–æ–¥–∞–Ω–æ.',
      noFiles:    '‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏.',
      select:     'üì° –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏:',
      submit:     'üöÄ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
      needOne:    '‚ùóÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
      saved:      '‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
      error:      '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.'
    },
    ru: {
      chooseLang: '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
      start:      'üéâ –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.',
      create:     'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç',
      attach:     'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç—á—ë—Ç–∞. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
      done:       '‚úÖ –ì–æ—Ç–æ–≤–æ',
      add:        '‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω.',
      noFiles:    '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.',
      select:     'üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:',
      submit:     'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
      needOne:    '‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
      saved:      '‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
      error:      '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.'
    }
  };

  // —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ chatId
  const pending = {};
  // –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  const CHANNELS = ['Telegram','Facebook','WhatsApp','Viber'];

  // retry‚Äë—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Airtable
  async function createRecord(fields, retries = 2) {
    try {
      await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]);
    } catch (err) {
      if (retries > 0) {
        await new Promise(r => setTimeout(r, 1_000));
        return createRecord(fields, retries - 1);
      }
      throw err;
    }
  }

  // inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  function langKeyboard() {
    return {
      reply_markup: {
        inline_keyboard: [
          [ { text: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'lang:uk' } ],
          [ { text: '–†—É—Å—Å–∫–∏–π',    callback_data: 'lang:ru' } ]
        ]
      }
    };
  }

  // –æ–±—ã—á–Ω–∞—è keyboard –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  function mainKeyboard(lang) {
    return {
      reply_markup: {
        keyboard: [[ M[lang].create ]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };
  }

  // inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
  function channelsKeyboard(selected, lang) {
    const rows = [];
    CHANNELS.forEach((ch, i) => {
      const text = (selected.includes(ch) ? '‚úÖ ' : '') + ch;
      const btn  = { text, callback_data: 'ch:' + ch };
      // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
      if (i % 2 === 0) rows.push([ btn ]);
      else rows[rows.length - 1].push(btn);
    });
    // –∫–Ω–æ–ø–∫–∞ ¬´üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª
    rows.push([ { text: M[lang].submit, callback_data: 'submit' } ]);
    return { reply_markup: { inline_keyboard: rows } };
  }

  // 1) /start ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫
  bot.onText(/\/start/, msg => {
    const chatId = msg.chat.id;
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pending[chatId] = {
      lang: null,
      files: [],
      channels: [],
      username: msg.from.username || msg.from.first_name
    };
    bot.sendMessage(chatId, M.uk.chooseLang, langKeyboard());
  });

  // 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ inline‚Äë–∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async query => {
    const chatId = query.message.chat.id;
    const data   = query.data;
    const state  = pending[chatId];
    if (!state) {
      return bot.answerCallbackQuery(query.id, '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
    }

    // -- –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ --
    if (data.startsWith('lang:')) {
      // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline‚Äë–∫–ª–∞–≤–æ–π
      await bot.deleteMessage(chatId, query.message.message_id);

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
      const lang = data.split(':')[1];
      state.lang = lang;

      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π keyboard
      return bot.sendMessage(
        chatId,
        M[lang].start,
        mainKeyboard(lang)
      );
    }

    // –µ—Å–ª–∏ —è–∑—ã–∫ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!state.lang) {
      return bot.answerCallbackQuery(query.id, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.');
    }

    // -- –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã --
    if (data.startsWith('ch:')) {
      const channel = data.slice(3);
      const idx = state.channels.indexOf(channel);
      if (idx > -1) state.channels.splice(idx,1);
      else state.channels.push(channel);

      return bot.editMessageReplyMarkup(
        channelsKeyboard(state.channels, state.lang).reply_markup,
        {
          chat_id: chatId,
          message_id: query.message.message_id
        }
      );
    }

    // -- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É --
    if (data === 'submit') {
      if (state.channels.length === 0) {
        return bot.answerCallbackQuery(query.id, M[state.lang].needOne);
      }

      // —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—è –¥–ª—è Airtable
      const attachments = state.files.map(f => ({ url: f.url }));
      const comment     = state.files.map((f,i)=>`File${i+1}: ${f.caption}`).join('\n');
      const fields      = {
        Employee:   state.username,
        Channel:    state.channels,
        Comment:    comment,
        Attachment: attachments
      };

      try {
        await createRecord(fields);
        await bot.editMessageText(M[state.lang].saved, {
          chat_id: chatId,
          message_id: query.message.message_id
        });
      } catch (err) {
        console.error(err);
        await bot.editMessageText(M[state.lang].error, {
          chat_id: chatId,
          message_id: query.message.message_id
        });
      }

      delete pending[chatId];
    }
  });

  // 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –∏ –ø—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤
  bot.on('message', async msg => {
    const chatId = msg.chat.id;
    const state  = pending[chatId];
    if (!state || !state.lang) return;

    const text = msg.text;
    const lang = state.lang;

    // –∞) –Ω–∞–∂–∞–ª–∏ ¬´üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç¬ª
    if (text === M[lang].create) {
      return bot.sendMessage(
        chatId,
        M[lang].attach,
        { reply_markup:{ keyboard:[[ M[lang].done ]], resize_keyboard:true } }
      );
    }

    // –±) –Ω–∞–∂–∞–ª–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª
    if (text === M[lang].done) {
      if (state.files.length === 0) {
        return bot.sendMessage(chatId, M[lang].noFiles);
      }
      // –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
      state.channels = [];
      return bot.sendMessage(
        chatId,
        M[lang].select,
        channelsKeyboard([], lang)
      );
    }

    // –≤) –ø—Ä–∏—à—ë–ª —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)
    if (msg.photo || msg.document) {
      const fileId = msg.photo
        ? msg.photo[msg.photo.length - 1].file_id
        : msg.document.file_id;

      const url = await bot.getFileLink(fileId);
      state.files.push({ url, caption: msg.caption || '' });

      return bot.sendMessage(chatId, M[lang].add);
    }
  });
};
