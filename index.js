// api/index.js
import 'dotenv/config';
import rawBody from 'raw-body';
import TelegramBot from 'node-telegram-bot-api';
import Airtable from 'airtable';

// –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Vercel, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å —á–∏—Å—Ç—ã–π –±—É—Ñ–µ—Ä
export const config = { api: { bodyParser: false } };

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Airtable
Airtable.configure({ apiKey: process.env.AIRTABLE_TOKEN });
const base = Airtable.base(process.env.AIRTABLE_BASE_ID);

// i18n‚Äë—Å–æ–æ–±—â–µ–Ω–∏—è
const MESSAGES = {
  uk: {
    chooseLang:     '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:',
    start:          '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É.',
    createReport:   'üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç',
    attach:         '–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç. –ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    done:           '‚úÖ –ì–æ—Ç–æ–≤–æ',
    addFile:        '–§–∞–π–ª –¥–æ–¥–∞–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    noFiles:        '–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ñ–∞–π–ª–∏.',
    selectChannels: '–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏:',
    confirm:        'üöÄ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
    chooseAtLeast:  '–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
    reportSaved:    '‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!',
    errorSave:      '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.'
  },
  ru: {
    chooseLang:     '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    start:          '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞.',
    createReport:   'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç',
    attach:         '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    done:           '‚úÖ –ì–æ—Ç–æ–≤–æ',
    addFile:        '–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–Ω–æ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "‚úÖ –ì–æ—Ç–æ–≤–æ".',
    noFiles:        '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.',
    selectChannels: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:',
    confirm:        'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
    chooseAtLeast:  '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.',
    reportSaved:    '‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',
    errorSave:      '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.'
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { webHook: true });
// –í ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π WEBHOOK_URL –¥–æ–ª–∂–Ω–æ –ª–µ–∂–∞—Ç—å: https://<–≤–∞—à-–¥–æ–º–µ–Ω>.vercel.app
bot.setWebHook(process.env.WEBHOOK_URL + '/api/index');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —á–∞—Ç–æ–≤
const pending = {};  
const CHANNELS = ['Telegram','Facebook','WhatsApp','Viber'];

// –ó–∞–ø–∏—Å—å –≤ Airtable —Å retry
async function createRecord(fields, retries = 2) {
  try {
    await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]);
  } catch (err) {
    if (retries > 0) {
      await new Promise(r => setTimeout(r, 1000));
      return createRecord(fields, retries - 1);
    }
    throw err;
  }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function langKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'lang:uk' }],
        [{ text: '–†—É—Å—Å–∫–∏–π',   callback_data: 'lang:ru' }]
      ]
    }
  };
}

function mainMenuKeyboard(lang) {
  return {
    reply_markup: {
      keyboard: [[ MESSAGES[lang].createReport ]],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
}

function channelsKeyboard(selected, lang) {
  const buttons = CHANNELS.map(ch => ({
    text: (selected.includes(ch) ? '‚úÖ ' : '') + ch,
    callback_data: 'ch:' + ch
  }));
  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }
  rows.push([{ text: MESSAGES[lang].confirm, callback_data: 'submit' }]);
  return { reply_markup: { inline_keyboard: rows } };
}

// 1) /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
bot.onText(/\/start/, msg => {
  const id = msg.chat.id;
  pending[id] = { lang: null, files: [], selectedChannels: [], username: msg.from.username || msg.from.first_name };
  bot.sendMessage(id, MESSAGES.uk.chooseLang, langKeyboard());
});

// 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (—è–∑—ã–∫, –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞)
bot.on('callback_query', async query => {
  const id = query.message.chat.id;
  const state = pending[id];
  const data = query.data;
  if (!state) {
    return bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start' });
  }

  // 2.1) –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
  if (data.startsWith('lang:')) {
    const lang = data.split(':')[1];
    state.lang = lang;
    await bot.editMessageText(MESSAGES[lang].start, {
      chat_id: id,
      message_id: query.message.message_id,
      reply_markup: mainMenuKeyboard(lang).reply_markup
    });
    return;
  }
  if (!state.lang) {
    return bot.answerCallbackQuery(query.id, { text: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.' });
  }

  // 2.2) –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
  if (data.startsWith('ch:')) {
    const ch = data.slice(3);
    state.selectedChannels = state.selectedChannels || [];
    if (state.selectedChannels.includes(ch)) {
      state.selectedChannels = state.selectedChannels.filter(x => x !== ch);
    } else {
      state.selectedChannels.push(ch);
    }
    return bot.editMessageReplyMarkup(
      channelsKeyboard(state.selectedChannels, state.lang).reply_markup,
      { chat_id: id, message_id: query.message.message_id }
    );
  }

  // 2.3) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  if (data === 'submit') {
    if (!state.selectedChannels.length) {
      return bot.answerCallbackQuery(query.id, { text: MESSAGES[state.lang].chooseAtLeast });
    }
    const attachments = state.files.map(f => ({ url: f.url }));
    const comment = state.files.map((f,i)=>`File${i+1}: ${f.caption}`).join('\n');
    const fields = {
      Employee:   state.username,
      Channel:    state.selectedChannels,
      Comment:    comment,
      Attachment: attachments
    };
    try {
      await createRecord(fields);
      await bot.editMessageText(MESSAGES[state.lang].reportSaved, {
        chat_id: id,
        message_id: query.message.message_id
      });
    } catch (e) {
      console.error(e);
      await bot.editMessageText(MESSAGES[state.lang].errorSave, {
        chat_id: id,
        message_id: query.message.message_id
      });
    }
    delete pending[id];
  }
});

// 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ¬´–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç¬ª, ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª, –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
bot.on('message', msg => {
  const id = msg.chat.id;
  const state = pending[id];
  if (!state || !state.lang) return;

  const text = msg.text;
  const lang = state.lang;

  // 3.1) –ù–∞–∂–∞–ª–∏ ¬´üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç¬ª
  if (text === MESSAGES[lang].createReport) {
    return bot.sendMessage(id, MESSAGES[lang].attach, {
      reply_markup: { keyboard: [[ MESSAGES[lang].done ]], resize_keyboard: true }
    });
  }
  // 3.2) –ù–∞–∂–∞–ª–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª
  if (text === MESSAGES[lang].done) {
    if (!state.files.length) {
      return bot.sendMessage(id, MESSAGES[lang].noFiles);
    }
    state.selectedChannels = [];
    return bot.sendMessage(id, MESSAGES[lang].selectChannels,
      channelsKeyboard([], lang)
    );
  }
  // 3.3) –ü—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
  if (msg.photo || msg.document) {
    const fileId = msg.photo
      ? msg.photo[msg.photo.length - 1].file_id
      : msg.document.file_id;
    bot.getFileLink(fileId).then(url => {
      state.files.push({ url, caption: msg.caption || '' });
      bot.sendMessage(id, MESSAGES[lang].addFile);
    });
  }
});

// 4) Vercel‚Äë—Ö–µ–Ω–¥–ª–µ—Ä
export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      const buf = await rawBody(req);
      const update = JSON.parse(buf.toString());
      await bot.processUpdate(update);
      return res.status(200).send('OK');
    } catch (err) {
      console.error('Webhook handler error:', err);
      return res.status(500).send('Error');
    }
  }
  // GET ‚Äî –¥–ª—è health check
  res.setHeader('Content-Type', 'text/plain');
  return res.status(200).send('GET works');
}
