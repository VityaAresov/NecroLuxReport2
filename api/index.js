// api/index.js
import 'dotenv/config';
import rawBody from 'raw-body';
import TelegramBot from 'node-telegram-bot-api';
import Airtable from 'airtable';

// --- Initialize Telegram Bot in webhook mode ---
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { webHook: true });

// --- Configure Airtable ---
Airtable.configure({ apiKey: process.env.AIRTABLE_TOKEN });
const base = Airtable.base(process.env.AIRTABLE_BASE_ID);

// --- In-memory storage and helper functions ---
const pending = {};
const CHANNELS = ['Telegram','Facebook','WhatsApp','Viber'];

async function createRecordWithRetry(fields, retries = 2) {
  try {
    return await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]);
  } catch (err) {
    if (retries > 0) {
      await new Promise(r => setTimeout(r, 1000));
      return createRecordWithRetry(fields, retries - 1);
    }
    throw err;
  }
}

function makeChannelsKeyboard(selected = []) {
  const buttons = CHANNELS.map(ch => ({
    text: (selected.includes(ch) ? '‚úÖ ' : '') + ch,
    callback_data: 'ch:' + ch
  }));
  const rows = [];
  for (let i = 0; i < buttons.length; i += 2) {
    rows.push(buttons.slice(i, i + 2));
  }
  rows.push([{ text: 'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'submit' }]);
  return { reply_markup: { inline_keyboard: rows } };
}

// --- Telegram handlers ---
bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª(—ã) –æ—Ç—á—ë—Ç–∞.', {
    reply_markup: { keyboard: [['üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç']], resize_keyboard: true }
  });
});

bot.on('message', msg => {
  const { chat: { id: chatId }, text } = msg;
  if (text === 'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç') {
    pending[chatId] = { files: [], username: msg.from.username || msg.from.first_name };
    bot.sendMessage(chatId, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç(—ã). –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ ‚Äü‚úÖ –ì–æ—Ç–æ–≤–æ‚Äù.', {
      reply_markup: { keyboard: [['‚úÖ –ì–æ—Ç–æ–≤–æ']], resize_keyboard: true }
    });
  }
});

async function handleFile(msg, fileId) {
  const chatId = msg.chat.id;
  if (!pending[chatId]) return;
  const url = await bot.getFileLink(fileId);
  pending[chatId].files.push({ url, caption: msg.caption || '' });
  bot.sendMessage(chatId, '–î–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ‚Äû‚úÖ –ì–æ—Ç–æ–≤–æ‚Äù.');
}
bot.on('photo', msg => handleFile(msg, msg.photo.pop().file_id));
bot.on('document', msg => handleFile(msg, msg.document.file_id));

bot.onText(/‚úÖ –ì–æ—Ç–æ–≤–æ/, msg => {
  const chatId = msg.chat.id;
  const entry = pending[chatId];
  if (!entry || !entry.files.length) return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.');
  entry.selectedChannels = [];
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:', makeChannelsKeyboard());
});

bot.on('callback_query', async query => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const entry = pending[chatId];
  if (!entry) return bot.answerCallbackQuery(query.id, { text: '–ù–∞—á–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.' });

  if (data.startsWith('ch:')) {
    const ch = data.slice(3);
    const sel = entry.selectedChannels;
    entry.selectedChannels = sel.includes(ch) ? sel.filter(x => x !== ch) : [...sel, ch];
    return bot.editMessageReplyMarkup(makeChannelsKeyboard(entry.selectedChannels).reply_markup, {
      chat_id: chatId,
      message_id: query.message.message_id
    });
  }

  if (data === 'submit') {
    if (!entry.selectedChannels.length) return bot.answerCallbackQuery(query.id, { text: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.' });
    const attachments = entry.files.map(f => ({ url: f.url }));
    const comment = entry.files.map((f, i) => `–§–∞–π–ª${i+1}: ${f.caption}`).join('\n');
    const fields = {
      Employee: entry.username,
      Channel: entry.selectedChannels,
      Comment: comment,
      Attachment: attachments
    };
    try {
      await createRecordWithRetry(fields);
      bot.editMessageText('‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', { chat_id: chatId, message_id: query.message.message_id });
    } catch (e) {
      console.error(e);
      bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.', { chat_id: chatId, message_id: query.message.message_id });
    }
    delete pending[chatId];
  }
});

// --- Vercel handler ---
export const config = {
  api: { bodyParser: false }
};

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const buf = await rawBody(req);
    const update = JSON.parse(buf.toString());
    bot.processUpdate(update);
    res.status(200).send('OK');
  } else {
    res.status(200).send('OK');
  }
}
