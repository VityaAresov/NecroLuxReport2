// bot.js
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const Airtable   = require('airtable');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
bot.on('polling_error', err => console.error('Polling error:', err));
process.on('unhandledRejection', (reason, promise) => console.error('Unhandled Rejection at:', promise, 'reason:', reason));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Airtable
Airtable.configure({ endpointUrl: 'https://api.airtable.com', apiKey: process.env.AIRTABLE_TOKEN });
const base = Airtable.base(process.env.AIRTABLE_BASE_ID);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const pending = {};  // pending[chatId] = { files: [...], username, selectedChannels }
const CHANNELS = ['Telegram','Facebook','WhatsApp','Viber'];

// Retry –¥–ª—è Airtable
async function createRecordWithRetry(fields, retries = 2) {
  try { return await base(process.env.AIRTABLE_TABLE_NAME).create([{ fields }]); }
  catch (err) { if (retries>0) { await new Promise(r=>setTimeout(r,1000)); return createRecordWithRetry(fields,retries-1);} throw err; }
}

// Inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
function makeChannelsKeyboard(selected=[]) {
  const buttons = CHANNELS.map(ch=>({ text:(selected.includes(ch)?'‚úÖ ':'')+ch, callback_data:'ch:'+ch }));
  const rows = [];
  for(let i=0;i<buttons.length;i+=2) rows.push(buttons.slice(i,i+2));
  rows.push([{ text:'üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data:'submit' }]);
  return { reply_markup:{ inline_keyboard: rows }};
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
const mainMenu = {
  reply_markup: {
    keyboard: [ [ 'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç' ] ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
};

// /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é:', mainMenu);
});

// –¢–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é ‚Äî ¬´–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç¬ª
bot.on('message', msg => {
  const chatId = msg.chat.id;
  const text = msg.text;
  if (text === 'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç') {
    pending[chatId] = { files: [], username: msg.from.username||msg.from.first_name };
    bot.sendMessage(chatId, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç—á—ë—Ç–∞. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –≤—Å—ë, –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', {
      reply_markup: { keyboard: [ ['‚úÖ –ì–æ—Ç–æ–≤–æ'] ], resize_keyboard: true, one_time_keyboard: true }
    });
  }
});

// –ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤
async function handleFile(msg, fileId) {
  const chatId = msg.chat.id;
  if (!pending[chatId]) return;
  const url = await bot.getFileLink(fileId);
  pending[chatId].files.push({ url, caption: msg.caption||'' });
  bot.sendMessage(chatId, '–î–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.');
}
bot.on('photo', async msg => handleFile(msg, msg.photo.pop().file_id));
bot.on('document', async msg => handleFile(msg, msg.document.file_id));

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ‚Äî –∫–Ω–æ–ø–∫–∞ ‚úÖ –ì–æ—Ç–æ–≤–æ
bot.onText(/‚úÖ –ì–æ—Ç–æ–≤–æ/, msg => {
  const chatId = msg.chat.id;
  const entry = pending[chatId];
  if (!entry || !entry.files.length) {
    return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.');
  }
  entry.selectedChannels = [];
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã:', makeChannelsKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async query => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const entry = pending[chatId];
  if (!entry) return bot.answerCallbackQuery(query.id, { text:'–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—á—ë—Ç —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.' });

  if (data.startsWith('ch:')) {
    const ch = data.slice(3);
    const sel = entry.selectedChannels;
    entry.selectedChannels = sel.includes(ch)? sel.filter(x=>x!==ch): [...sel, ch];
    return bot.editMessageReplyMarkup(makeChannelsKeyboard(entry.selectedChannels).reply_markup, { chat_id:chatId, message_id:query.message.message_id });
  }

  if (data === 'submit') {
    if (!entry.selectedChannels.length) return bot.answerCallbackQuery(query.id, { text:'–û—Ç–º–µ—Ç—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.' });
    const attachments = entry.files.map(f=>({ url:f.url }));
    const comment = entry.files.map((f,i)=>`–§–∞–π–ª${i+1}: ${f.caption}`).join('\n');
    const fields = { Employee: entry.username, Channel: entry.selectedChannels, Comment: comment, Attachment: attachments };
    try {
      await createRecordWithRetry(fields);
      bot.editMessageText('‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', { chat_id:chatId, message_id:query.message.message_id });
    } catch (e) {
      console.error(e);
      bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.', { chat_id:chatId, message_id:query.message.message_id });
    }
    delete pending[chatId];
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ
bot.on('message', msg => {
  const txt = msg.text || '';
  if (!txt.startsWith('/') && txt !== 'üÜï –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç' && txt !== '‚úÖ –ì–æ—Ç–æ–≤–æ' && !msg.photo && !msg.document) {
    bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: /start');
  }
});
